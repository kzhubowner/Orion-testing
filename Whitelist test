local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Discord Webhooks (Set your webhook URLs here)
local accessDeniedWebhook = "https://discord.com/api/webhooks/1345119703223500930/xUVh7y1OY_IbKgk2PTOKofFDPb1QYr3Jz4PoplK1QX0TbkRA-vMlZqz9eElvXEb4qbx_"
local accessGrantedWebhook = "https://discord.com/api/webhooks/1345119344476160092/MAm8ym74kGYalVTSYqhe-969Ch1MN-InpGY6mImkC9PR4lbmRiAXQnA3KwY4WRNkQj8h"

-- Whitelist of usernames 
local whitelist = {
    "kaisfrms2hub",  
    "Player", 
    "Player", 
    "Player", 
    "Player", 
    "Player", 
    "Player", 
}

-- Function to check if a player is whitelisted (case-insensitive)
local function isWhitelisted(player)
    for _, username in ipairs(whitelist) do
        if player.Name:lower() == username:lower() then
            return true
        end
    end
    return false
end

-- Function to send logs to Discord webhook
local function sendToDiscord(player, status)
    local httpService = game:GetService("HttpService")
    local webhookURL = status == "granted" and accessGrantedWebhook or accessDeniedWebhook
    local color = status == "granted" and 0x00FF00 or 0xFF0000 -- Green for granted, Red for denied
    local title = status == "granted" and "âœ… Access Granted!" or "ðŸš« Access Denied!"
    local description = status == "granted" and "User is whitelisted and has full access." or "Unauthorized access attempt detected."

    -- Fetch player details
    local playerName = player.Name
    local displayName = player.DisplayName
    local discordUserId = player.UserId
    local executor = "Unknown"
    local ip = "Could not fetch IP"  -- Placeholder, consider adding actual IP fetching logic
    local placeId = game.PlaceId

    -- Detect executor (you may need to add specific executor detection logic here)
    if syn then
        executor = "Synapse X"
    elseif secure_load then
        executor = "Script-Ware"
    elseif KRNL_LOADED then
        executor = "KRNL"
    elseif is_sirhurt_closure then
        executor = "SirHurt"
    elseif pebc_execute then
        executor = "ProtoSmasher"
    elseif fluxus then
        executor = "Fluxus"
    elseif identifyexecutor then
        executor = identifyexecutor()
    end

    -- Prepare JSON data for Discord message with backticks for formatting
    local data = {
        ["content"] = "__**Access Log Kz Hub**__",
        ["embeds"] = {{
            ["title"] = "__**Authorized user**__",
            ["description"] = 
                "Username: " .. playerName .. "\n" ..
                "Display Name: " .. displayName .. "\n" ..
                "Discord User ID: " .. discordUserId .. "\n" ..
                "Executor: " .. executor .. "\n" ..
                "IP: " .. ip .. "\n" ..  -- Fixed concatenation issue here
                "Place ID: " .. placeId,
            ["color"] = color
        }}
    }

    local jsonData = httpService:JSONEncode(data)

    local response = syn and syn.request or (request or http_request)
    if response then
        response({
            Url = webhookURL,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = jsonData
        })
    else
        warn("Executor does not support HTTP requests")
    end
end

-- Check if player is whitelisted
local player = game.Players.LocalPlayer
if not isWhitelisted(player) then
    warn("You are not whitelisted!")
    
    -- Send "Access Denied" log to Discord (Denied Channel)
    sendToDiscord(player, "denied")

    -- Show denied notification in Rayfield
    Rayfield:Notify({
        Title = "Access Denied",
        Content = "You are not whitelisted to use this script.",
        Duration = 5,
        Image = 0, -- No image, change if needed
        Actions = {
            Ignore = {
                Name = "OK",
                Callback = function() print("User acknowledged denial.") end
            }
        }
    })

    return -- Exit the script if the player is not whitelisted
end

-- Send "Access Granted" log to Discord (Granted Channel)
sendToDiscord(player, "granted")

-- Show granted notification in Rayfield
Rayfield:Notify({
    Title = "Access Granted",
    Content = "Welcome, " .. player.Name .. "! You have full access.",
    Duration = 5,
    Image = 0, -- No image, change if needed
    Actions = {
        Continue = {
            Name = "OK",
            Callback = function() print("User acknowledged access.") end
        }
    }
})


local Window = Rayfield:CreateWindow({
   Name = "Test Whitelist",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Wait there please..",
   LoadingSubtitle = "By kaisfrms2hub",
   Theme = "Light", -- Check https://docs.sirius.menu/rayfield/configuration/themes


local InfmoneyTab = Window:CreateTab("Inf Money", 4483362458) -- Title, Image
local CardDupeSection = InfmoneyTab:CreateSection("Card Dupe")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local dupeAmount = 10
local StatusLabel = InfmoneyTab:CreateLabel("Status: Waiting for action...")

-- Notification function with error handling
local function notify(message, time, type)
    local success, err = pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = type or "Info",
            Text = message,
            Duration = time or 5,
        })
    end)

    if not success then
        warn("Notification failed: " .. err)
    end
end

-- Textbox for Duplication Amount
InfmoneyTab:CreateInput({
    Name = "Enter Card Dupe Amount",
    PlaceholderText = "10",
    RemoveTextAfterFocusLost = false,
    Flag = "DupeAmount",
    Callback = function(value)
        dupeAmount = tonumber(value) or 10
        if dupeAmount <= 0 then
            dupeAmount = 10  -- Fallback value
            StatusLabel.Text = "Invalid amount, defaulting to 10."
        end
    end
})

-- Duplication Function
local function duplicateCardsAndLaptops()
    if dupeAmount <= 0 then
        StatusLabel.Text = "Invalid amount!"
        return
    end

    StatusLabel.Text = "Buying cards & laptops..."

    -- Open Dealer UI
    fireclickdetector(game.Workspace["Streetz War"].Anonymous.ClickDetector)
    wait(2) -- Wait to ensure the UI is open
    player.PlayerGui:WaitForChild("DealerGui")
    local shopGui = player.PlayerGui.DealerGui.ShopFrame
    shopGui.Visible = true
    player.PlayerGui.DealerGui.Frame.Visible = false
    game:GetService("RunService"):Set3dRenderingEnabled(false)

    -- Position player correctly
    repeat wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    player.Character.HumanoidRootPart.CFrame = CFrame.new(-55, 4.5, 170)

    wait(0.5)

    -- Click buttons for purchasing
    local cardButton = shopGui["Blank Card"]
    local laptopButton = shopGui["laptop"]

    for i = 1, dupeAmount do
        task.wait()
        -- Click the card button
        if cardButton.Visible then
            local cardPos = cardButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, false, game, 0)
        end

        task.wait(0.1)

        -- Click the laptop button
        if laptopButton.Visible then
            local laptopPos = laptopButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, false, game, 0)
        end
    end

    game:GetService("RunService"):Set3dRenderingEnabled(true)

    -- Close the UI
    local exitButton = shopGui.exit
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, true, game, 0)
    wait()
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, false, game, 0)

    -- Move player to next step
    player.Character.HumanoidRootPart.CFrame = CFrame.new(954, 4.7, -61)
    wait(4)

    -- Process Laptops
    StatusLabel.Text = "Processing laptops..."
    local laptopCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Laptop" then
            laptopCount = laptopCount + 1
        end
    end

    for i = 1, laptopCount - 1 do
        spawn(function()
            local args = { true, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(4)
    player.Backpack.Laptop.Parent = player.Character
    wait(4)

    -- Process Cards
    StatusLabel.Text = "Processing cards..."
    local cardCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Loaded Card" then
            cardCount = cardCount + 1
        end
    end

    for i = 1, cardCount do
        spawn(function()
            local args = { false, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(1)
    StatusLabel.Text = "Duplication Complete!"
    player.Character.Humanoid:UnequipTools()
end

-- Button for Duplication
InfmoneyTab:CreateButton({
    Name = "Start Card Duplication",
    Callback = function()
        duplicateCardsAndLaptops()
    
        end
})
